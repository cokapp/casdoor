name: Build

on: [ push, pull_request ]

jobs:

  frontend:
    name: Front-end
    runs-on: ubuntu-latest
    needs: [ ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: ./web/yarn.lock
      - run: yarn install && CI=false yarn run build
        working-directory: ./web

  backend:
    name: Back-end
    runs-on: ubuntu-latest
    needs: [ ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '^1.16.5'
          cache-dependency-path: ./go.mod
      - run: go version
      - name: Build
        run: |
          go build -race -ldflags "-extldflags '-static'"
        working-directory: ./

  release-and-push:
    name: Release And Push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [ frontend, backend ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: -1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Fetch Previous version
        id: get-previous-tag
        uses: actions-ecosystem/action-get-latest-tag@v1.6.0

      - name: Release
        run: yarn global add semantic-release@17.4.4 && semantic-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Current version
        id: get-current-tag
        uses: actions-ecosystem/action-get-latest-tag@v1.6.0

      - name: Decide Should_Push Or Not
        id: should_push
        run: |
          old_version=${{steps.get-previous-tag.outputs.tag}}
          new_version=${{steps.get-current-tag.outputs.tag }}

          old_array=(${old_version//\./ })
          new_array=(${new_version//\./ })

          if [ ${old_array[0]} != ${new_array[0]} ]
          then 
              echo ::set-output name=push::'true'
          elif [ ${old_array[1]} != ${new_array[1]} ]
          then 
              echo ::set-output name=push::'true'
          else
              echo ::set-output name=push::'false'
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Log in to Alibaba Cloud Container Registry
        uses: docker/login-action@v1
        if: github.event_name == 'push' && steps.should_push.outputs.push == 'true'
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.ALIYUN_ACR_USERNAME }}
          password: ${{ secrets.ALIYUN_ACR_PASSWORD }}

      - name: Push to Alibaba Cloud Container Registry - Standard Version
        uses: docker/build-push-action@v3
        if: github.event_name == 'push' && steps.should_push.outputs.push == 'true'
        with:
          context: .
          target: STANDARD
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            registry.cn-hangzhou.aliyuncs.com/cokapp/casdoor:${{ steps.get-current-tag.outputs.tag }}
            registry.cn-hangzhou.aliyuncs.com/cokapp/casdoor:latest

      - name: Push All In One Version to Alibaba Cloud Container Registry
        uses: docker/build-push-action@v3
        if: github.event_name == 'push' && steps.should_push.outputs.push == 'true'
        with:
          context: .
          target: ALLINONE
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            registry.cn-hangzhou.aliyuncs.com/cokapp/casdoor-all-in-one:${{ steps.get-current-tag.outputs.tag }}
            registry.cn-hangzhou.aliyuncs.com/cokapp/casdoor-all-in-one:latest


